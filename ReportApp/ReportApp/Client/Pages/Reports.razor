@page "/reports"
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.Options;
@using ReportApp.Shared
@using ReportApp.Shared.Models;
@using ReportApp.Shared.Models.Settings;
@inject IOptions<HostedServiceSettings> _hostedServiceOptions

<PageTitle>Reports</PageTitle>

<h1>Reports</h1>

<p>This component demonstrates fetching data from the server with SignalR</p>

@if (reports == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Records Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var report in reports)
            {
                <tr>
                    <td>@report.Date.ToShortDateString()</td>
                    <td>@report.DataCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Report>? reports;
    private HostedServiceSettings? _hostedServiceSettings;
    private HubConnection? _reportDataHubConnection;

    protected override async Task OnInitializedAsync()
    {
        SetSettingsValues();
        await StartHubConnection();
        RefreshFloorData();
    }

    private void SetSettingsValues()
    {
        _hostedServiceSettings = _hostedServiceOptions.Value;
    }

    private async Task StartHubConnection()
    {
        var sensorDataUrl = ($"{_hostedServiceSettings!.BaseAddress}{_hostedServiceSettings!.Uri}");
        _reportDataHubConnection = new HubConnectionBuilder()
                        .WithUrl(sensorDataUrl)
                        .Build();

        await _reportDataHubConnection.StartAsync();
        if (_reportDataHubConnection.State == HubConnectionState.Connected)
            Console.WriteLine("SignalR Connection started");
    }

    private void RefreshFloorData()
    {
        _reportDataHubConnection!.On<List<Report>>(_hostedServiceSettings!.MethodName, (data) =>
        {
            Console.WriteLine(
                string.Format("Report data fetched", DateTime.Now));

            reports = data;
            StateHasChanged();
        });
    }
}